package com.alterego.lifesumtest;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.alterego.lifesumtest.LifesumItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIFESUM_ITEM.
*/
public class LifesumItemDao extends AbstractDao<LifesumItem, Long> {

    public static final String TABLENAME = "LIFESUM_ITEM";

    /**
     * Properties of entity LifesumItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Categoryid = new Property(1, Integer.class, "categoryid", false, "CATEGORYID");
        public final static Property Fiber = new Property(2, Double.class, "fiber", false, "FIBER");
        public final static Property Headimage = new Property(3, String.class, "headimage", false, "HEADIMAGE");
        public final static Property Pcsingram = new Property(4, Double.class, "pcsingram", false, "PCSINGRAM");
        public final static Property Brand = new Property(5, String.class, "brand", false, "BRAND");
        public final static Property Unsaturatedfat = new Property(6, Double.class, "unsaturatedfat", false, "UNSATURATEDFAT");
        public final static Property Fat = new Property(7, Double.class, "fat", false, "FAT");
        public final static Property Servingcategory = new Property(8, Integer.class, "servingcategory", false, "SERVINGCATEGORY");
        public final static Property Typeofmeasurement = new Property(9, Integer.class, "typeofmeasurement", false, "TYPEOFMEASUREMENT");
        public final static Property Protein = new Property(10, Double.class, "protein", false, "PROTEIN");
        public final static Property Defaultserving = new Property(11, Integer.class, "defaultserving", false, "DEFAULTSERVING");
        public final static Property Mlingram = new Property(12, Double.class, "mlingram", false, "MLINGRAM");
        public final static Property Saturatedfat = new Property(13, Double.class, "saturatedfat", false, "SATURATEDFAT");
        public final static Property Category = new Property(14, String.class, "category", false, "CATEGORY");
        public final static Property Verified = new Property(15, Boolean.class, "verified", false, "VERIFIED");
        public final static Property Title = new Property(16, String.class, "title", false, "TITLE");
        public final static Property Pcstext = new Property(17, String.class, "pcstext", false, "PCSTEXT");
        public final static Property Sodium = new Property(18, Double.class, "sodium", false, "SODIUM");
        public final static Property Carbohydrates = new Property(19, Double.class, "carbohydrates", false, "CARBOHYDRATES");
        public final static Property Showonlysametype = new Property(20, Integer.class, "showonlysametype", false, "SHOWONLYSAMETYPE");
        public final static Property Calories = new Property(21, Integer.class, "calories", false, "CALORIES");
        public final static Property Serving_version = new Property(22, Integer.class, "serving_version", false, "SERVING_VERSION");
        public final static Property Sugar = new Property(23, Double.class, "sugar", false, "SUGAR");
        public final static Property Measurementid = new Property(24, Integer.class, "measurementid", false, "MEASUREMENTID");
        public final static Property Cholesterol = new Property(25, Double.class, "cholesterol", false, "CHOLESTEROL");
        public final static Property Gramsperserving = new Property(26, Double.class, "gramsperserving", false, "GRAMSPERSERVING");
        public final static Property Showmeasurement = new Property(27, Integer.class, "showmeasurement", false, "SHOWMEASUREMENT");
        public final static Property Potassium = new Property(28, Double.class, "potassium", false, "POTASSIUM");
    };


    public LifesumItemDao(DaoConfig config) {
        super(config);
    }
    
    public LifesumItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIFESUM_ITEM' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORYID' INTEGER," + // 1: categoryid
                "'FIBER' REAL," + // 2: fiber
                "'HEADIMAGE' TEXT," + // 3: headimage
                "'PCSINGRAM' REAL," + // 4: pcsingram
                "'BRAND' TEXT," + // 5: brand
                "'UNSATURATEDFAT' REAL," + // 6: unsaturatedfat
                "'FAT' REAL," + // 7: fat
                "'SERVINGCATEGORY' INTEGER," + // 8: servingcategory
                "'TYPEOFMEASUREMENT' INTEGER," + // 9: typeofmeasurement
                "'PROTEIN' REAL," + // 10: protein
                "'DEFAULTSERVING' INTEGER," + // 11: defaultserving
                "'MLINGRAM' REAL," + // 12: mlingram
                "'SATURATEDFAT' REAL," + // 13: saturatedfat
                "'CATEGORY' TEXT," + // 14: category
                "'VERIFIED' INTEGER," + // 15: verified
                "'TITLE' TEXT," + // 16: title
                "'PCSTEXT' TEXT," + // 17: pcstext
                "'SODIUM' REAL," + // 18: sodium
                "'CARBOHYDRATES' REAL," + // 19: carbohydrates
                "'SHOWONLYSAMETYPE' INTEGER," + // 20: showonlysametype
                "'CALORIES' INTEGER," + // 21: calories
                "'SERVING_VERSION' INTEGER," + // 22: serving_version
                "'SUGAR' REAL," + // 23: sugar
                "'MEASUREMENTID' INTEGER," + // 24: measurementid
                "'CHOLESTEROL' REAL," + // 25: cholesterol
                "'GRAMSPERSERVING' REAL," + // 26: gramsperserving
                "'SHOWMEASUREMENT' INTEGER," + // 27: showmeasurement
                "'POTASSIUM' REAL);"); // 28: potassium
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIFESUM_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LifesumItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer categoryid = entity.getCategoryid();
        if (categoryid != null) {
            stmt.bindLong(2, categoryid);
        }
 
        Double fiber = entity.getFiber();
        if (fiber != null) {
            stmt.bindDouble(3, fiber);
        }
 
        String headimage = entity.getHeadimage();
        if (headimage != null) {
            stmt.bindString(4, headimage);
        }
 
        Double pcsingram = entity.getPcsingram();
        if (pcsingram != null) {
            stmt.bindDouble(5, pcsingram);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(6, brand);
        }
 
        Double unsaturatedfat = entity.getUnsaturatedfat();
        if (unsaturatedfat != null) {
            stmt.bindDouble(7, unsaturatedfat);
        }
 
        Double fat = entity.getFat();
        if (fat != null) {
            stmt.bindDouble(8, fat);
        }
 
        Integer servingcategory = entity.getServingcategory();
        if (servingcategory != null) {
            stmt.bindLong(9, servingcategory);
        }
 
        Integer typeofmeasurement = entity.getTypeofmeasurement();
        if (typeofmeasurement != null) {
            stmt.bindLong(10, typeofmeasurement);
        }
 
        Double protein = entity.getProtein();
        if (protein != null) {
            stmt.bindDouble(11, protein);
        }
 
        Integer defaultserving = entity.getDefaultserving();
        if (defaultserving != null) {
            stmt.bindLong(12, defaultserving);
        }
 
        Double mlingram = entity.getMlingram();
        if (mlingram != null) {
            stmt.bindDouble(13, mlingram);
        }
 
        Double saturatedfat = entity.getSaturatedfat();
        if (saturatedfat != null) {
            stmt.bindDouble(14, saturatedfat);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(15, category);
        }
 
        Boolean verified = entity.getVerified();
        if (verified != null) {
            stmt.bindLong(16, verified ? 1l: 0l);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(17, title);
        }
 
        String pcstext = entity.getPcstext();
        if (pcstext != null) {
            stmt.bindString(18, pcstext);
        }
 
        Double sodium = entity.getSodium();
        if (sodium != null) {
            stmt.bindDouble(19, sodium);
        }
 
        Double carbohydrates = entity.getCarbohydrates();
        if (carbohydrates != null) {
            stmt.bindDouble(20, carbohydrates);
        }
 
        Integer showonlysametype = entity.getShowonlysametype();
        if (showonlysametype != null) {
            stmt.bindLong(21, showonlysametype);
        }
 
        Integer calories = entity.getCalories();
        if (calories != null) {
            stmt.bindLong(22, calories);
        }
 
        Integer serving_version = entity.getServing_version();
        if (serving_version != null) {
            stmt.bindLong(23, serving_version);
        }
 
        Double sugar = entity.getSugar();
        if (sugar != null) {
            stmt.bindDouble(24, sugar);
        }
 
        Integer measurementid = entity.getMeasurementid();
        if (measurementid != null) {
            stmt.bindLong(25, measurementid);
        }
 
        Double cholesterol = entity.getCholesterol();
        if (cholesterol != null) {
            stmt.bindDouble(26, cholesterol);
        }
 
        Double gramsperserving = entity.getGramsperserving();
        if (gramsperserving != null) {
            stmt.bindDouble(27, gramsperserving);
        }
 
        Integer showmeasurement = entity.getShowmeasurement();
        if (showmeasurement != null) {
            stmt.bindLong(28, showmeasurement);
        }
 
        Double potassium = entity.getPotassium();
        if (potassium != null) {
            stmt.bindDouble(29, potassium);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LifesumItem readEntity(Cursor cursor, int offset) {
        LifesumItem entity = new LifesumItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // categoryid
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // fiber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headimage
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // pcsingram
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // brand
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // unsaturatedfat
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // fat
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // servingcategory
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // typeofmeasurement
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // protein
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // defaultserving
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // mlingram
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // saturatedfat
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // category
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // verified
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // title
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // pcstext
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // sodium
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // carbohydrates
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // showonlysametype
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // calories
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // serving_version
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // sugar
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // measurementid
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // cholesterol
            cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26), // gramsperserving
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // showmeasurement
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28) // potassium
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LifesumItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFiber(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setHeadimage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPcsingram(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setBrand(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnsaturatedfat(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setFat(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setServingcategory(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTypeofmeasurement(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setProtein(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDefaultserving(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMlingram(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setSaturatedfat(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setCategory(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVerified(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setTitle(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPcstext(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSodium(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setCarbohydrates(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setShowonlysametype(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setCalories(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setServing_version(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setSugar(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setMeasurementid(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setCholesterol(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setGramsperserving(cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26));
        entity.setShowmeasurement(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setPotassium(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LifesumItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LifesumItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
